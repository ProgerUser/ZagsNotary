; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MJ"
#define MyAppVersion "1.0"
#define MyAppPublisher "PACHULIYA SAID"
#define MyAppExeName "MJ_UPDATES.exe"

#define OutReports "OutReports"
#define bin "bin"
#define Reports "Reports"
#define SqlLite "SqlLite"
#define Logs "Logs"
#define ufs "UFS"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{882DA0C5-9D91-42F3-9422-EEDD88F6BA6B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DisableDirPage=no
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=C:\MJ_
OutputBaseFilename=MjSetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=true

[Languages]
Name: russian; MessagesFile: compiler:Languages\Russian.isl

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked

[Files]
Source: C:\MJ_\{#MyAppExeName}; DestDir: {app}; Flags: ignoreversion
Source: OutReports\*; DestDir: {app}\{#OutReports}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: Reports\*; DestDir: {app}\{#Reports}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: SqlLite\*; DestDir: {app}\{#SqlLite}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: Logs\*; DestDir: {app}\{#Logs}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: bin\*; DestDir: {app}\{#bin}; Flags: ignoreversion recursesubdirs createallsubdirs
;Source: ufs\*; DestDir: {app}\{#ufs}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: C:\MJ_\SqlLite\log.db; DestDir: {app}\{#SqlLite}; Flags: ignoreversion
Source: C:\MJ_\MJ.exe; DestDir: {app}; Flags: ignoreversion

;fastreport
Source: C:\MJ_\bin\frrepQueryStorage.dll; DestDir: {app}\{#bin}; Flags: ignoreversion
Source: C:\MJ_\bin\frrepFindReport.dll; DestDir: {app}\{#bin}; Flags: ignoreversion
Source: C:\MJ_\bin\frrepCheckSyntax.dll; DestDir: {app}\{#bin}; Flags: ignoreversion
Source: C:\MJ_\bin\FRREP.dll; DestDir: {app}\{#bin}; Flags: ignoreversion
Source: C:\MJ_\bin\frdbmandll.dll; DestDir: {app}\{#bin}; Flags: ignoreversion
Source: C:\MJ_\bin\FRREPRunner.exe; DestDir: {app}\{#bin}; Flags: ignoreversion

Source: C:\MJ_\UFS\AUDIT.fr3; DestDir: {app}\{#ufs}; Flags: ignoreversion
Source: C:\MJ_\UFS\RE_ACCESS.fr3; DestDir: {app}\{#ufs}; Flags: ignoreversion
Source: C:\MJ_\UFS\UPD_NAT.fr3; DestDir: {app}\{#ufs}; Flags: ignoreversion
Source: C:\MJ_\UFS\USERS_LIST.fr3; DestDir: {app}\{#ufs}; Flags: ignoreversion

; NOTE: Don't use "Flags: ignoreversion" on any shared system files


[Icons]
Name: {autoprograms}\{#MyAppName}; Filename: {app}\{#MyAppExeName}
Name: {autodesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon

[Registry]
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName: "MJ_PATH"; \
    ValueData: "{app}\"; Flags: preservestringtype

[Registry]
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName: "ufs_path"; \
    ValueData: "{app}\{#ufs}"; Flags: preservestringtype

[Run]
Filename: {app}\{#MyAppExeName}; Description: {cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}; Flags: nowait postinstall skipifsilent;BeforeInstall: SetEnvPath; AfterInstall: RefreshEnvironment;

[Code]
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

procedure SetEnvPath;
begin
  if not SetEnvironmentVariable('MJ_PATH', '{app}\') then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
end;

const
  SMTO_ABORTIFHUNG = 2;
  WM_WININICHANGE = $001A;
  WM_SETTINGCHANGE = WM_WININICHANGE;

type
  WPARAM = UINT_PTR;
  LPARAM = INT_PTR;
  LRESULT = INT_PTR;

function SendTextMessageTimeout(hWnd: HWND; Msg: UINT;
  wParam: WPARAM; lParam: PAnsiChar; fuFlags: UINT;
  uTimeout: UINT; out lpdwResult: DWORD): LRESULT;
  external 'SendMessageTimeoutA@user32.dll stdcall';  

procedure RefreshEnvironment;
var
  S: AnsiString;
  MsgResult: DWORD;
begin
  S := 'Environment';
  SendTextMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0,
    PAnsiChar(S), SMTO_ABORTIFHUNG, 5000, MsgResult);
end;